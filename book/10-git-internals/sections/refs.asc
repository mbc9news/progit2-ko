[[_git_refs]]
//////////////////////////
=== Git References
//////////////////////////
=== Git Refs

//////////////////////////
You can run something like `git log 1a410e` to look through your whole history, but you still have to remember that `1a410e` is the last commit in order to walk that history to find all those objects.
You need a file in which you can store the SHA-1 value under a simple name so you can use that pointer rather than the raw SHA-1 value.
//////////////////////////
`git log 1a410e`라고 실행하면 전체 히스토리를 볼 수 있지만, 여전히 `1a410e`를 기억해야 한다. 이 커밋은 마지막 커밋이기 때문에 히스토리를 따라 모든 개체를 조회할 수 있다.
SHA-1 값을 날로 사용하기보다 쉬운 이름으로 된 포인터가 있으면 그걸 사용하는 게 더 좋다. 외우기 쉬운 이름으로 된 파일에 SHA-1 값을 저장한다.

//////////////////////////
In Git, these are called ``references'' or ``refs''; you can find the files that contain the SHA-1 values in the `.git/refs` directory.
In the current project, this directory contains no files, but it does contain a simple structure:
//////////////////////////
Git에서는 이런 것을 ''References`` 또는 ''Refs``라고 부른다. SHA-1 값이 든 파일은 `.git/refs` 디렉토리에 있다.
아직 `.git/refs` 디렉토리 안에 파일은 없고 디렉토리만 몇 개 있다.

[source,console]
----
$ find .git/refs
.git/refs
.git/refs/heads
.git/refs/tags
$ find .git/refs -type f
----

//////////////////////////
To create a new reference that will help you remember where your latest commit is, you can technically do something as simple as this:
//////////////////////////
Refs가 있으면 커밋을 찾기 쉬워진다. 사실 내부는 아래처럼 단순하다.

[source,console]
----
$ echo "1a410efbd13591db07496601ebc7a059dd55cfe9" > .git/refs/heads/master
----

//////////////////////////
Now, you can use the head reference you just created instead of the SHA-1 value in your Git commands:
//////////////////////////
SHA-1 값 대신에 지금 만든 Refs를 사용할 수 있다.

[source,console]
----
$ git log --pretty=oneline  master
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

//////////////////////////
You aren't encouraged to directly edit the reference files.
Git provides a safer command to do this if you want to update a reference called `update-ref`:
//////////////////////////
Refs 파일을 직접 고치는 것이 좀 못마땅하다. Git에는 좀 더 안전하게 바꿀 수 있는 `update-ref` 명령이 있다.

[source,console]
----
$ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9
----

//////////////////////////
That's basically what a branch in Git is: a simple pointer or reference to the head of a line of work.
To create a branch back at the second commit, you can do this:
//////////////////////////
Git 브랜치의 역할이 바로 이거다. 브랜치는 어떤 작업 중 마지막 작업을 가리키는 포인터 또는 Refs이다.
간단히 두 번째 커밋을 가리키는 브랜치를 만들어 보자.

[source,console]
----
$ git update-ref refs/heads/test cac0ca
----

//////////////////////////
Your branch will contain only work from that commit down:
//////////////////////////
브랜치는 직접 가리키는 커밋과 그 커밋으로 따라갈 수 있는 모든 커밋을 포함한다.

[source,console]
----
$ git log --pretty=oneline test
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

//////////////////////////
Now, your Git database conceptually looks something like this:
//////////////////////////
이제 Git 데이터베이스는 아래 그림처럼 보인다.

//////////////////////////
.Git directory objects with branch head references included.
image::images/data-model-4.png[Git directory objects with branch head references included.]
//////////////////////////
.브랜치 Refs가 추가된 Git 데이터베이스.
image::images/data-model-4.png[브랜치 Refs가 추가된 Git 데이터베이스.]

//////////////////////////
When you run commands like `git branch (branchname)`, Git basically runs that `update-ref` command to add the SHA-1 of the last commit of the branch you're on into whatever new reference you want to create.
//////////////////////////
`git branch (branchname)` 명령을 실행하면 Git은 내부적으로 `update-ref` 명령을 실행한다. 입력받은 브랜치 이름과 현 브랜치의 마지막 커밋의 SHA-1 값을 가져다 `update-ref` 명령을 실행한다.

[[_the_head]]
//////////////////////////
==== The HEAD
//////////////////////////
==== HEAD

//////////////////////////
The question now is, when you run `git branch (branchname)`, how does Git know the SHA-1 of the last commit?
The answer is the HEAD file.
//////////////////////////
`git branch (branchname)` 명령을 실행할 때 Git은 어떻게 마지막 커밋의 SHA-1 값을 아는 걸까?
HEAD 파일은 현 브랜치를 가리키는 간접(symbolic) Refs다.

//////////////////////////
The HEAD file is a symbolic reference to the branch you're currently on.
By symbolic reference, we mean that unlike a normal reference, it doesn’t generally contain a SHA-1 value but rather a pointer to another reference.
If you look at the file, you'll normally see something like this:
//////////////////////////
간접 Refs라서 다른 것과 다르다.
이 Refs는 다른 Refs를 가리키는 것이라서 SHA-1 값이 없다.
파일을 열어 보면 아래와 같이 생겼다.

[source,console]
----
$ cat .git/HEAD
ref: refs/heads/master
----

//////////////////////////
If you run `git checkout test`, Git updates the file to look like this:
//////////////////////////
`git checkout test`를 실행하면 Git은 HEAD 파일을 아래와 같이 바꾼다.

[source,console]
----
$ cat .git/HEAD
ref: refs/heads/test
----

//////////////////////////
When you run `git commit`, it creates the commit object, specifying the parent of that commit object to be whatever SHA-1 value the reference in HEAD points to.
//////////////////////////
`git commit`을 실행하면 커밋 개체가 만들어지는데, 지금 HEAD가 가리키고 있던 커밋의 SHA-1 값이 그 커밋 개체의 부모로 사용된다.

//////////////////////////
You can also manually edit this file, but again a safer command exists to do so: `symbolic-ref`.
You can read the value of your HEAD via this command:
//////////////////////////
이 파일도 손으로 직접 편집할 수 있지만 `symbolic-ref`라는 명령어가 있어서 좀 더 안전하게 사용할 수 있다.
이 명령으로 HEAD의 값을 읽을 수 있다.

[source,console]
----
$ git symbolic-ref HEAD
refs/heads/master
----

//////////////////////////
You can also set the value of HEAD:
//////////////////////////
HEAD의 값을 변경할 수도 있다.

[source,console]
----
$ git symbolic-ref HEAD refs/heads/test
$ cat .git/HEAD
ref: refs/heads/test
----

//////////////////////////
You can't set a symbolic reference outside of the refs style:
//////////////////////////
refs 형식에 맞지 않으면 수정할 수 없다.

[source,console]
----
$ git symbolic-ref HEAD test
fatal: Refusing to point HEAD outside of refs/
----

//////////////////////////
==== Tags
//////////////////////////
==== 태그

//////////////////////////
We just finished discussing Git's three main object types, but there is a fourth.
The tag object is very much like a commit object – it contains a tagger, a date, a message, and a pointer.
The main difference is that a tag object generally points to a commit rather than a tree.
It's like a branch reference, but it never moves – it always points to the same commit but gives it a friendlier name.
//////////////////////////
중요한 개체는 모두 살펴봤고 살펴볼 개체가 하나가 남았다.
태그 개체는 커밋 개체랑 매우 비슷하다. 커밋 개체처럼 누가, 언제 태그를 달았는지 태그 메시지는 무엇이고 어떤 커밋을 가리키는지에 대한 정보가 포함된다.
태그 개체는 Tree 개체가 아니라 커밋 개체를 가리키는 것이 그 둘의 차이다.
브랜치처럼 커밋 개체를 가리키지만 옮길 수는 없다. 태그 개체는 늘 그 이름이 뜻하는 커밋만 가리킨다.

//////////////////////////
As discussed in <<_git_basics_chapter>>, there are two types of tags: annotated and lightweight.
You can make a lightweight tag by running something like this:
//////////////////////////
<<_git_basics_chapter>> 에서 배웠듯 태그는 Annotated 태그와 Lightweight 태그 두 종류로 나뉜다.
먼저 아래와 같이 Lightweight 태그를 만들어 보자.

[source,console]
----
$ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d
----

//////////////////////////
That is all a lightweight tag is – a reference that never moves.
An annotated tag is more complex, however.
If you create an annotated tag, Git creates a tag object and then writes a reference to point to it rather than directly to the commit.
You can see this by creating an annotated tag (`-a` specifies that it's an annotated tag):
//////////////////////////
Lightwieght 태그는 만들기 쉽다. 브랜치랑 비슷하지만 브랜치처럼 옮길 수는 없다.
이에 비해 Annotated 태그는 좀 더 복잡하다. Annotated 태그를 만들면 Git은 태그 개체를 만들고 거기에 커밋을 가리키는 Refs를 저장한다.
Annotated 태그는 커밋을 직접 가리키지 않고 태그 개체를 가리킨다.
`-a` 옵션을 주고 Annotated 태그를 만들어 확인해보자.

[source,console]
----
$ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m 'test tag'
----

//////////////////////////
Here's the object SHA-1 value it created:
//////////////////////////
태그 개체의 SHA-1 값을 확인한다.

[source,console]
----
$ cat .git/refs/tags/v1.1
9585191f37f7b0fb9444f35a9bf50de191beadc2
----

//////////////////////////
Now, run the `cat-file` command on that SHA-1 value:
//////////////////////////
`cat-file` 명령으로 해당 SHA-1 값의 내용을 조회한다.

[source,console]
----
$ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2
object 1a410efbd13591db07496601ebc7a059dd55cfe9
type commit
tag v1.1
tagger Scott Chacon <schacon@gmail.com> Sat May 23 16:48:58 2009 -0700

test tag
----

//////////////////////////
Notice that the object entry points to the commit SHA-1 value that you tagged.
Also notice that it doesn't need to point to a commit; you can tag any Git object.
In the Git source code, for example, the maintainer has added their GPG public key as a blob object and then tagged it.
You can view the public key by running this in a clone of the Git repository:
//////////////////////////
`object` 부분에 있는 SHA-1 값이 실제로 태그가 가리키는 커밋이다.
커밋 개체뿐만 아니라 모든 Git 개체에 태그를 달 수 있다.
커밋 개체에 태그를 다는 것이 아니라 Git 개체에 태그를 다는 것이다.
Git을 개발하는 프로젝트에서는 관리자가 자신의 GPG 공개키를 Blob 개체로 추가하고 그 파일에 태그를 달았다.
아래 명령으로 그 공개키를 확인할 수 있다.

[source,console]
----
$ git cat-file blob junio-gpg-pub
----

//////////////////////////
The Linux kernel repository also has a non-commit-pointing tag object – the first tag created points to the initial tree of the import of the source code.
//////////////////////////
Linux Kernel 저장소에도 커밋이 아닌 다른 개체를 가리키는 태그 개체가 있다. 그 태그는 저장소에 처음으로 소스 코드를 임포트했을 때 그 첫 Tree 개체를 가리킨다.

//////////////////////////
==== Remotes
//////////////////////////
==== 리모트

//////////////////////////
The third type of reference that you'll see is a remote reference.
If you add a remote and push to it, Git stores the value you last pushed to that remote for each branch in the `refs/remotes` directory.
For instance, you can add a remote called `origin` and push your `master` branch to it:
//////////////////////////
리모트 Refs라는 것도 있다.
리모트를 추가하고 Push 하면 Git은 각 브랜치마다 Push 한 마지막 커밋이 무엇인지 `refs/remotes` 디렉토리에 저장한다.
예를 들어, `origin`이라는 리모트를 추가하고 `master` 브랜치를 Push 한다.

[source,console]
----
$ git remote add origin git@github.com:schacon/simplegit-progit.git
$ git push origin master
Counting objects: 11, done.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (7/7), 716 bytes, done.
Total 7 (delta 2), reused 4 (delta 1)
To git@github.com:schacon/simplegit-progit.git
  a11bef0..ca82a6d  master -> master
----

//////////////////////////
Then, you can see what the `master` branch on the `origin` remote was the last time you communicated with the server, by checking the `refs/remotes/origin/master` file:
//////////////////////////
`origin`의 `master` 브랜치에서 서버와 마지막으로 교환한 커밋이 어떤 것인지 `refs/remotes/origin/master` 파일에서 확인할 수 있다.

[source,console]
----
$ cat .git/refs/remotes/origin/master
ca82a6dff817ec66f44342007202690a93763949
----

//////////////////////////
Remote references differ from branches (`refs/heads` references) mainly in that they're considered read-only.
You can `git checkout` to one, but Git won't point HEAD at one, so you'll never update it with a `commit` command.
Git manages them as bookmarks to the last known state of where those branches were on those servers.
//////////////////////////
`refs/heads`에 있는 Refs인 브랜치와 달리 리모트 Refs는 Checkout 할 수 없고 읽기 용도로만 쓸 수 있는 브랜치인 것이다.
이 리모트 Refs는 서버의 브랜치가 가리키는 커밋이 무엇인지 적어둔 일종의 북마크이다.
